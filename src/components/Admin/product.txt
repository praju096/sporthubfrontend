import React, { useEffect, useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { yupResolver } from "@hookform/resolvers/yup";
import { useDispatch, useSelector } from "react-redux";
import { RootState, AppDispatch } from "../../store";
import {
  fetchPaginatedProducts,
  addProduct,
  updateProduct,
  deleteProduct,
} from "../../redux/features/products/productSlice";
import { Product, ProductFormData } from "../../types/productsTypes";
import { toast } from "react-toastify";
import { productSchema } from "../../types/validation/productSchema";


const ManageProducts = () => {
  const dispatch = useDispatch<AppDispatch>();
  const { productsWithPage: products, loading, page, totalPages } = useSelector(
    (state: RootState) => state.products
  );
  const [currentPage, setCurrentPage] = useState(1);
  const limit = 10;

  const [showProductForm, setShowProductForm] = useState(false);
  const [editProductById, setEditProductById] = useState<number | null>(null);

  const {
    register,
    handleSubmit,
    reset,
    setValue,
    formState: { errors, touchedFields },
  } = useForm<ProductFormData>({
    resolver: yupResolver(productSchema),
    mode: "onTouched",
  });

  useEffect(() => {
    dispatch(fetchPaginatedProducts({ page: currentPage, limit }));
  }, [dispatch, currentPage]);

  const onSubmit: SubmitHandler<ProductFormData> = async (data) => {
    // console.log("Submitting:", data);
    if (editProductById) {
      await dispatch(updateProduct({ id: editProductById, product: data }));
      toast.success("Product Edit Successfully");
    } else {
      await dispatch(addProduct(data));
      toast.success("Product Add Successfully");
    }
    reset();
    setEditProductById(null);
    setShowProductForm(false);
    dispatch(fetchPaginatedProducts({ page: currentPage, limit }));
  };

  const handleEdit = (product: Product) => {
    setEditProductById(product.id);
    setShowProductForm(true);
    Object.entries(product).forEach(([key, value]) => {
      if (key in productSchema.fields) {
        setValue(key as keyof ProductFormData, value);
      }
    });
  };

  const handleDelete = async (id: number) => {
    if (window.confirm("Are you sure you want to delete this product?")) {
      await dispatch(deleteProduct(id));
      dispatch(fetchPaginatedProducts({ page: currentPage, limit }));
      toast.error("Product Delete Successfully");
    }
  };

  const handleCancel = () => {
    reset();
    setEditProductById(null);
    setShowProductForm(false);
  };

  return (
    <div className="card shadow rounded-4 p-4">
      <div className="d-flex justify-content-between align-items-center mb-4">
        <h3>
          <i className="fas fa-archive text-danger"></i> Manage Products
        </h3>
        {!showProductForm && (
          <button className="btn btn-danger" onClick={() => setShowProductForm(true)}>
            <i className="fas fa-plus me-2"></i>
            {editProductById ? "Edit Product" : "Add Product"}
          </button>
        )}
      </div>

      {showProductForm && (
        <form onSubmit={handleSubmit(onSubmit)} className="row g-3 mb-4">
          <div className="col-md-4">
            <label className="form-label">
              Product Name<span className="text-danger">*</span>
            </label>
            <input
              type="text"
              placeholder="Product Name"
              className={`form-control ${errors.name && touchedFields.name ? "is-invalid" : ""}`}
              {...register("name")}
            />
            {errors.name && (
              <div className="invalid-feedback">{errors.name.message}</div>
            )}
          </div>

          <div className="col-md-4">
            <label className="form-label">
              Price<span className="text-danger">*</span>
            </label>
            <input
              type="number"
              placeholder="Price"
              step="0.01"
              className={`form-control ${errors.price && touchedFields.price ? "is-invalid" : ""}`}
              {...register("price")}
            />
            {errors.price && (
              <div className="invalid-feedback">{errors.price.message}</div>
            )}
          </div>

          <div className="col-md-4">
            <label className="form-label">Original Price</label>
            <input
              type="text"
              placeholder="Original Price (Optional)"
              className={`form-control ${errors.original_price && touchedFields.original_price ? "is-invalid" : ""}`}
              {...register("original_price")}
            />
            {errors.original_price && (
              <div className="invalid-feedback">
                {errors.original_price.message}
              </div>
            )}
          </div>

          <div className="col-12">
            <label className="form-label">
              Description<span className="text-danger">*</span>
            </label>
            <textarea
              rows={2}
              placeholder="Description"
              className={`form-control ${errors.description && touchedFields.description ? "is-invalid" : ""}`}
              {...register("description")}
            />
            {errors.description && (
              <div className="invalid-feedback">
                {errors.description.message}
              </div>
            )}
          </div>

          <div className="col-md-4">
            <label className="form-label">
              Image URL<span className="text-danger">* 300x300px</span>
            </label>
            <input
              type="file"
              accept="image/*"
              className={`form-control ${errors.image_url && touchedFields.image_url ? "is-invalid" : ""}`}
              {...register("image_url")}
            />
            {errors.image_url && (
              <div className="invalid-feedback">{errors.image_url.message}</div>
            )}
          </div>

          {editProductById && (
            <div className="col-md-4">
              <label className="form-label">Current Image</label>
              <br />
              <img
                src={`http://localhost:5000${products.find((product) => product.id === editProductById)?.image_url}`}
                alt="Product"
                style={{ width: "100px", height: "100px", objectFit: "cover" }}
              />
            </div>
          )}

          <div className="col-md-4">
            <label className="form-label">
              Gender<span className="text-danger">*</span>
            </label>
            <select
              className={`form-select ${errors.category_gender && touchedFields.category_gender ? "is-invalid" : ""}`}
              {...register("category_gender")}
            >
              <option value="">Select Gender</option>
              <option value="Men">Men</option>
              <option value="Women">Women</option>
              <option value="Kids">Kids</option>
            </select>
            {errors.category_gender && (
              <div className="invalid-feedback">
                {errors.category_gender.message}
              </div>
            )}
          </div>

          <div className="col-md-4">
            <label className="form-label">
              Category<span className="text-danger">*</span>
            </label>
            <input
              type="text"
              placeholder="Category"
              className={`form-control ${errors.category && touchedFields.category ? "is-invalid" : ""}`}
              {...register("category")}
            />
            {errors.category && (
              <div className="invalid-feedback">{errors.category.message}</div>
            )}
          </div>

          <div className="col-md-4">
            <label className="form-label">
              Rating<span className="text-danger">*</span>
            </label>
            <input
              type="number"
              placeholder="Rating"
              step="0.01"
              className={`form-control ${errors.rating && touchedFields.rating ? "is-invalid" : ""}`}
              {...register("rating")}
            />
            {errors.rating && (
              <div className="invalid-feedback">{errors.rating.message}</div>
            )}
          </div>

          <div className="input-group mx-auto">
            <div className="col-md-2 form-check form-switch">
              <label className="form-label">New</label>
              <input
                className="form-check-input"
                type="checkbox"
                {...register("is_new")}
              />
            </div>
            <div className="col-md-2 form-check form-switch">
              <label className="form-label">On Sale</label>
              <input
                className="form-check-input"
                type="checkbox"
                {...register("is_on_sale")}
              />
            </div>
            <div className="col-md-2 form-check form-switch">
              <label className="form-label">Bestseller</label>
              <input
                className="form-check-input"
                type="checkbox"
                {...register("bestseller")}
              />
            </div>
            <div className="col-md-2 form-check form-switch">
              <label className="form-label">Featured</label>
              <input
                className="form-check-input"
                type="checkbox"
                {...register("featured_product")}
              />
            </div>
          </div>

          <div className="col-12 d-flex justify-content-end gap-2">
            <button
              type="button"
              className="btn btn-secondary"
              onClick={handleCancel}
            >
              Cancel
            </button>
            <button type="submit" className="btn btn-danger">
              {editProductById ? "Update" : "Add"} Product
            </button>
          </div>
        </form>
      )}

      {loading ? (
        <div className="text-center my-5">
          <div className="spinner-border" role="status">
            <span className="visually-hidden">Loading...</span>
          </div>
        </div>
      ) : (
        <>
          <div className="table-responsive">
            <table className="table table-hover table-striped">
              <thead className="table-dark">
                <tr>
                  <th>ID</th>
                  <th>Image</th>
                  <th>Name</th>
                  <th>Price</th>
                  <th>Original</th>
                  <th>Desc</th>
                  <th>Gender</th>
                  <th>Category</th>
                  <th>New</th>
                  <th>Sale</th>
                  <th>Best</th>
                  <th>Featured</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                {products.length > 0 ? (
                  products.map((product) => (
                    <tr key={product.id}>
                      <td>{product.id}</td>
                      <td>
                        <img
                          className="rounded-5"
                          src={`${process.env.REACT_APP_API_URL}${product.image_url}`}
                          alt={product.name}
                          style={{
                            width: "50px",
                            height: "50px",
                            objectFit: "cover",
                          }}
                        />
                      </td>
                      <td>{product.name}</td>
                      <td>₹{product.price}</td>
                      <td>
                        {product.original_price
                          ? `₹${product.original_price}`
                          : "-"}
                      </td>
                      <td>{product.description}</td>
                      <td>{product.category_gender}</td>
                      <td>{product.category}</td>
                      <td>{product.is_new ? "Yes" : "No"}</td>
                      <td>{product.is_on_sale ? "Yes" : "No"}</td>
                      <td>{product.bestseller ? "Yes" : "No"}</td>
                      <td>{product.featured_product ? "Yes" : "No"}</td>
                      <td>
                        <button
                          className="btn btn-sm btn-warning me-1"
                          onClick={() => handleEdit(product)}
                        >
                          Edit
                        </button>
                        <button
                          className="btn btn-sm btn-danger"
                          onClick={() => handleDelete(product.id)}
                        >
                          Delete
                        </button>
                      </td>
                    </tr>
                  ))
                ) : (
                  <tr>
                    <td colSpan={13} className="text-center text-muted">
                      No Products Found
                    </td>
                  </tr>
                )}
              </tbody>
            </table>
          </div>

          <div className="d-flex justify-content-between mt-3">
            <button
              className="btn btn-danger"
              disabled={currentPage === 1}
              onClick={() => setCurrentPage((prev) => prev - 1)}
            >
              Prev
            </button>
            <span>
              <h4>Products (Page {page} of {totalPages})</h4>
            </span>
            <button
              className="btn btn-danger"
              disabled={currentPage === totalPages}
              onClick={() => setCurrentPage((prev) => prev + 1)}
            >
              Next
            </button>
          </div>
        </>
      )}
    </div>
  );
};

export default ManageProducts;
